
Adding room database into a project for saving race records
==========================

Step

1 .  Add plugin kotlin-kapt in app gradle


2.  Add dependencies in app gradle

    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"



3. Add DB Classes
=================

Create a 'datastorage'  package datastorage
Create a RaceDb.kt file in it.

3.1 Define Table entity class in RaceDb.kt
=============================

@Entity
data class RecordEntity(
    @ColumnInfo(name = "name") var name: String,
    @ColumnInfo(name = "distance") var distance: Int,
    @ColumnInfo(name = "time") var time: Int)
{
    @PrimaryKey(autoGenerate = true) var priId: Int? = null


}


3.2 Create DAO interface in RaceDb.kt
========================

@Dao
interface RaceDao {

    @Insert
    fun insertRecord(vararg item: RecordEntity)

    @Update
    fun updateRecord(vararg item: RecordEntity)

    @Query("SELECT * from RecordEntity")
    fun getAllRecords() : List<RecordEntity>
}


3.3 Abstract database class in RaceDb.kt
===========================
@Database(
    entities = [RecordEntity::class], version = 1, exportSchema = false
)
abstract class RaceDatabase : RoomDatabase() {

    //this declaration of abtract method associate DAO class with the database class RaceDatabase
    abstract fun getDao(): RaceDao

    companion object {

        var DB_FILENAME  = "myracedb"

        @Volatile
        private var INSTANCE: RaceDatabase? = null

        fun get(context: Context): RaceDatabase {
            val tmp =
                INSTANCE
            if (tmp != null) {
                return tmp
            }
            synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    RaceDatabase::class.java,
                    DB_FILENAME)
                    .fallbackToDestructiveMigration()
                    .build()

                INSTANCE = instance
                return instance
            }
        }
    }
}

4. Adding record to Database from RecordActivity & Crashing the app

    var entity = RecordEntity(
                binding.editName.text.toString(),
                binding.editLength.text.toString().toInt(),
                binding.editTime.text.toString().toInt()
    )

    //Accessing database directly from UI thread is bad. because it can block the UI
    // DO NOT DO THIS IN EXAM :)
    RaceDatabase.get(this).getDao().insertRecord(entity)
    //Todo NOTE: We will be accessing database with  ViewModel and Coroutine later


4.1 HOW to fix the crash

    In RaceDb.kt file allow ui thread quering while building RaceDatabase

    Add allowMainThreadQueries call to databaseBuilder

    val instance = Room.databaseBuilder(
                        context.applicationContext,
                        RaceDatabase::class.java,
                        DB_FILENAME)
                        .allowMainThreadQueries()   //<------- here
                        .fallbackToDestructiveMigration()
                        .build()


5. Override toString for RecordEntity class

override fun toString(): String {
        return "$name ran distance of $distance meters in $time seconds"
    }

6.  override fun onResume() in MainActivity class

    override fun onResume() {
        super.onResume()

        //Querying database table records
        RaceDatabase.get(this).getDao().getAllRecords().map { entity->
            Log.d(this.javaClass.simpleName, entity.toString())

            //So far so good
        }


}

7-- Run the app

